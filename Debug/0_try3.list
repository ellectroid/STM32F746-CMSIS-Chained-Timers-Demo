
0_try3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000648  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000810  08000818  00010818  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000810  08000810  00010818  2**0
                  CONTENTS
  4 .ARM          00000000  08000810  08000810  00010818  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000810  08000818  00010818  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000810  08000810  00010810  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000814  08000814  00010814  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010818  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000000  08000818  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  08000818  00020020  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010818  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001a10  00000000  00000000  00010848  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000676  00000000  00000000  00012258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000170  00000000  00000000  000128d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000118  00000000  00000000  00012a40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ba39  00000000  00000000  00012b58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001838  00000000  00000000  0002e591  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009b089  00000000  00000000  0002fdc9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000cae52  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000003e4  00000000  00000000  000caea8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000000 	.word	0x20000000
 80001e4:	00000000 	.word	0x00000000
 80001e8:	080007f8 	.word	0x080007f8

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000004 	.word	0x20000004
 8000204:	080007f8 	.word	0x080007f8

08000208 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000208:	b480      	push	{r7}
 800020a:	b083      	sub	sp, #12
 800020c:	af00      	add	r7, sp, #0
 800020e:	4603      	mov	r3, r0
 8000210:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000212:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000216:	2b00      	cmp	r3, #0
 8000218:	db0b      	blt.n	8000232 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800021a:	79fb      	ldrb	r3, [r7, #7]
 800021c:	f003 021f 	and.w	r2, r3, #31
 8000220:	4907      	ldr	r1, [pc, #28]	; (8000240 <__NVIC_EnableIRQ+0x38>)
 8000222:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000226:	095b      	lsrs	r3, r3, #5
 8000228:	2001      	movs	r0, #1
 800022a:	fa00 f202 	lsl.w	r2, r0, r2
 800022e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000232:	bf00      	nop
 8000234:	370c      	adds	r7, #12
 8000236:	46bd      	mov	sp, r7
 8000238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800023c:	4770      	bx	lr
 800023e:	bf00      	nop
 8000240:	e000e100 	.word	0xe000e100

08000244 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8000244:	b480      	push	{r7}
 8000246:	b083      	sub	sp, #12
 8000248:	af00      	add	r7, sp, #0
 800024a:	4603      	mov	r3, r0
 800024c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800024e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000252:	2b00      	cmp	r3, #0
 8000254:	db0c      	blt.n	8000270 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000256:	79fb      	ldrb	r3, [r7, #7]
 8000258:	f003 021f 	and.w	r2, r3, #31
 800025c:	4907      	ldr	r1, [pc, #28]	; (800027c <__NVIC_ClearPendingIRQ+0x38>)
 800025e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000262:	095b      	lsrs	r3, r3, #5
 8000264:	2001      	movs	r0, #1
 8000266:	fa00 f202 	lsl.w	r2, r0, r2
 800026a:	3360      	adds	r3, #96	; 0x60
 800026c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000270:	bf00      	nop
 8000272:	370c      	adds	r7, #12
 8000274:	46bd      	mov	sp, r7
 8000276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800027a:	4770      	bx	lr
 800027c:	e000e100 	.word	0xe000e100

08000280 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000280:	b480      	push	{r7}
 8000282:	b083      	sub	sp, #12
 8000284:	af00      	add	r7, sp, #0
 8000286:	4603      	mov	r3, r0
 8000288:	6039      	str	r1, [r7, #0]
 800028a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800028c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000290:	2b00      	cmp	r3, #0
 8000292:	db0a      	blt.n	80002aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000294:	683b      	ldr	r3, [r7, #0]
 8000296:	b2da      	uxtb	r2, r3
 8000298:	490c      	ldr	r1, [pc, #48]	; (80002cc <__NVIC_SetPriority+0x4c>)
 800029a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800029e:	0112      	lsls	r2, r2, #4
 80002a0:	b2d2      	uxtb	r2, r2
 80002a2:	440b      	add	r3, r1
 80002a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80002a8:	e00a      	b.n	80002c0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002aa:	683b      	ldr	r3, [r7, #0]
 80002ac:	b2da      	uxtb	r2, r3
 80002ae:	4908      	ldr	r1, [pc, #32]	; (80002d0 <__NVIC_SetPriority+0x50>)
 80002b0:	79fb      	ldrb	r3, [r7, #7]
 80002b2:	f003 030f 	and.w	r3, r3, #15
 80002b6:	3b04      	subs	r3, #4
 80002b8:	0112      	lsls	r2, r2, #4
 80002ba:	b2d2      	uxtb	r2, r2
 80002bc:	440b      	add	r3, r1
 80002be:	761a      	strb	r2, [r3, #24]
}
 80002c0:	bf00      	nop
 80002c2:	370c      	adds	r7, #12
 80002c4:	46bd      	mov	sp, r7
 80002c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ca:	4770      	bx	lr
 80002cc:	e000e100 	.word	0xe000e100
 80002d0:	e000ed00 	.word	0xe000ed00

080002d4 <basic_timer_setup>:
#include "bsctmr.h"

void basic_timer_setup(TIM_TypeDef *TMR) {
 80002d4:	b580      	push	{r7, lr}
 80002d6:	b082      	sub	sp, #8
 80002d8:	af00      	add	r7, sp, #0
 80002da:	6078      	str	r0, [r7, #4]
	TMR->CR1 |= TIM_CR1_ARPE | TIM_CR1_URS; //ARR is buffered | only overflow/underflow generates update event.
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	681b      	ldr	r3, [r3, #0]
 80002e0:	f043 0284 	orr.w	r2, r3, #132	; 0x84
 80002e4:	687b      	ldr	r3, [r7, #4]
 80002e6:	601a      	str	r2, [r3, #0]

	TMR->PSC = (108000U / 2U) - 1U; //APB1 is 54MHz, timer is 2x APB1 Freq, so now the timer is at 2kHz; 16-bit value!!!
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	f24d 22ef 	movw	r2, #53999	; 0xd2ef
 80002ee:	629a      	str	r2, [r3, #40]	; 0x28
	TMR->ARR = 2000U; //2000 ticks at 2kHz is 1s
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80002f6:	62da      	str	r2, [r3, #44]	; 0x2c
	TMR->CNT = 0x00; //start value 0
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	2200      	movs	r2, #0
 80002fc:	625a      	str	r2, [r3, #36]	; 0x24
	TMR->DIER |= TIM_DIER_UIE; //update event interrupt enable
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	68db      	ldr	r3, [r3, #12]
 8000302:	f043 0201 	orr.w	r2, r3, #1
 8000306:	687b      	ldr	r3, [r7, #4]
 8000308:	60da      	str	r2, [r3, #12]

	if (TMR == TIM6) {
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	4a0c      	ldr	r2, [pc, #48]	; (8000340 <basic_timer_setup+0x6c>)
 800030e:	4293      	cmp	r3, r2
 8000310:	d106      	bne.n	8000320 <basic_timer_setup+0x4c>
		NVIC_SetPriority(TIM6_DAC_IRQn, 1U);
 8000312:	2101      	movs	r1, #1
 8000314:	2036      	movs	r0, #54	; 0x36
 8000316:	f7ff ffb3 	bl	8000280 <__NVIC_SetPriority>
		NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800031a:	2036      	movs	r0, #54	; 0x36
 800031c:	f7ff ff74 	bl	8000208 <__NVIC_EnableIRQ>
	}
	if (TMR == TIM7) {
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	4a08      	ldr	r2, [pc, #32]	; (8000344 <basic_timer_setup+0x70>)
 8000324:	4293      	cmp	r3, r2
 8000326:	d106      	bne.n	8000336 <basic_timer_setup+0x62>
		NVIC_SetPriority(TIM7_IRQn, 1U);
 8000328:	2101      	movs	r1, #1
 800032a:	2037      	movs	r0, #55	; 0x37
 800032c:	f7ff ffa8 	bl	8000280 <__NVIC_SetPriority>
		NVIC_EnableIRQ(TIM7_IRQn);
 8000330:	2037      	movs	r0, #55	; 0x37
 8000332:	f7ff ff69 	bl	8000208 <__NVIC_EnableIRQ>
	}

}
 8000336:	bf00      	nop
 8000338:	3708      	adds	r7, #8
 800033a:	46bd      	mov	sp, r7
 800033c:	bd80      	pop	{r7, pc}
 800033e:	bf00      	nop
 8000340:	40001000 	.word	0x40001000
 8000344:	40001400 	.word	0x40001400

08000348 <basic_timer_start>:

void basic_timer_start(TIM_TypeDef *TMR) {
 8000348:	b480      	push	{r7}
 800034a:	b083      	sub	sp, #12
 800034c:	af00      	add	r7, sp, #0
 800034e:	6078      	str	r0, [r7, #4]
	TMR->CR1 |= TIM_CR1_CEN; //enable timer
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	681b      	ldr	r3, [r3, #0]
 8000354:	f043 0201 	orr.w	r2, r3, #1
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	601a      	str	r2, [r3, #0]

}
 800035c:	bf00      	nop
 800035e:	370c      	adds	r7, #12
 8000360:	46bd      	mov	sp, r7
 8000362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000366:	4770      	bx	lr

08000368 <TIM6_DAC_IRQHandler>:

void TIM6_DAC_IRQHandler(void) {
 8000368:	b580      	push	{r7, lr}
 800036a:	af00      	add	r7, sp, #0
	TIM6->SR &= ~TIM_SR_UIF; //clear update event interrupt flag in timer peripheral
 800036c:	4b06      	ldr	r3, [pc, #24]	; (8000388 <TIM6_DAC_IRQHandler+0x20>)
 800036e:	691b      	ldr	r3, [r3, #16]
 8000370:	4a05      	ldr	r2, [pc, #20]	; (8000388 <TIM6_DAC_IRQHandler+0x20>)
 8000372:	f023 0301 	bic.w	r3, r3, #1
 8000376:	6113      	str	r3, [r2, #16]
	NVIC_ClearPendingIRQ(TIM6_DAC_IRQn); //clear interrupt pending flag in NVIC
 8000378:	2036      	movs	r0, #54	; 0x36
 800037a:	f7ff ff63 	bl	8000244 <__NVIC_ClearPendingIRQ>
	toggle_led1();
 800037e:	f000 f841 	bl	8000404 <toggle_led1>
}
 8000382:	bf00      	nop
 8000384:	bd80      	pop	{r7, pc}
 8000386:	bf00      	nop
 8000388:	40001000 	.word	0x40001000

0800038c <gpio_setup>:

void gpio_setup_porta(void);
void gpio_setup_portb(void);
void gpio_setup_porti(void);

void gpio_setup(void) {
 800038c:	b580      	push	{r7, lr}
 800038e:	af00      	add	r7, sp, #0
	gpio_setup_porta();
 8000390:	f000 f806 	bl	80003a0 <gpio_setup_porta>
	gpio_setup_portb();
 8000394:	f000 f80b 	bl	80003ae <gpio_setup_portb>
	gpio_setup_porti();
 8000398:	f000 f810 	bl	80003bc <gpio_setup_porti>
}
 800039c:	bf00      	nop
 800039e:	bd80      	pop	{r7, pc}

080003a0 <gpio_setup_porta>:

void gpio_setup_porta(void) {
 80003a0:	b480      	push	{r7}
 80003a2:	af00      	add	r7, sp, #0

}
 80003a4:	bf00      	nop
 80003a6:	46bd      	mov	sp, r7
 80003a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ac:	4770      	bx	lr

080003ae <gpio_setup_portb>:
void gpio_setup_portb(void) {
 80003ae:	b480      	push	{r7}
 80003b0:	af00      	add	r7, sp, #0

}
 80003b2:	bf00      	nop
 80003b4:	46bd      	mov	sp, r7
 80003b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ba:	4770      	bx	lr

080003bc <gpio_setup_porti>:
void gpio_setup_porti(void) {
 80003bc:	b480      	push	{r7}
 80003be:	af00      	add	r7, sp, #0
	/*
	 *  PI1 GREEN LED LED1 ACTIVE HIGH
	 * */
	GPIOI->MODER = (GPIOI->MODER & ~(1U << 3U)) | (1U << 2U); //PI1 set to general purpose output mode
 80003c0:	4b0f      	ldr	r3, [pc, #60]	; (8000400 <gpio_setup_porti+0x44>)
 80003c2:	681b      	ldr	r3, [r3, #0]
 80003c4:	f023 030c 	bic.w	r3, r3, #12
 80003c8:	4a0d      	ldr	r2, [pc, #52]	; (8000400 <gpio_setup_porti+0x44>)
 80003ca:	f043 0304 	orr.w	r3, r3, #4
 80003ce:	6013      	str	r3, [r2, #0]
	GPIOI->OTYPER &= ~(GPIO_OTYPER_OT_1); //PI1 output push-pull
 80003d0:	4b0b      	ldr	r3, [pc, #44]	; (8000400 <gpio_setup_porti+0x44>)
 80003d2:	685b      	ldr	r3, [r3, #4]
 80003d4:	4a0a      	ldr	r2, [pc, #40]	; (8000400 <gpio_setup_porti+0x44>)
 80003d6:	f023 0302 	bic.w	r3, r3, #2
 80003da:	6053      	str	r3, [r2, #4]
	GPIOI->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEEDR1); //PI1 output speed very low
 80003dc:	4b08      	ldr	r3, [pc, #32]	; (8000400 <gpio_setup_porti+0x44>)
 80003de:	689b      	ldr	r3, [r3, #8]
 80003e0:	4a07      	ldr	r2, [pc, #28]	; (8000400 <gpio_setup_porti+0x44>)
 80003e2:	f023 030c 	bic.w	r3, r3, #12
 80003e6:	6093      	str	r3, [r2, #8]
	GPIOI->PUPDR &= ~(GPIO_PUPDR_PUPDR1); //PI1 no pull-up no pull-down
 80003e8:	4b05      	ldr	r3, [pc, #20]	; (8000400 <gpio_setup_porti+0x44>)
 80003ea:	68db      	ldr	r3, [r3, #12]
 80003ec:	4a04      	ldr	r2, [pc, #16]	; (8000400 <gpio_setup_porti+0x44>)
 80003ee:	f023 030c 	bic.w	r3, r3, #12
 80003f2:	60d3      	str	r3, [r2, #12]
}
 80003f4:	bf00      	nop
 80003f6:	46bd      	mov	sp, r7
 80003f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003fc:	4770      	bx	lr
 80003fe:	bf00      	nop
 8000400:	40022000 	.word	0x40022000

08000404 <toggle_led1>:
void blink_led1(void) {
	GPIOI->ODR |= GPIO_ODR_OD1; //set PI1 to high
	system_msdelay(100U);
	GPIOI->ODR &= ~GPIO_ODR_OD1; //set PI1 to low
}
void toggle_led1(void){
 8000404:	b480      	push	{r7}
 8000406:	af00      	add	r7, sp, #0
	GPIOI->ODR ^= GPIO_ODR_OD1;
 8000408:	4b05      	ldr	r3, [pc, #20]	; (8000420 <toggle_led1+0x1c>)
 800040a:	695b      	ldr	r3, [r3, #20]
 800040c:	4a04      	ldr	r2, [pc, #16]	; (8000420 <toggle_led1+0x1c>)
 800040e:	f083 0302 	eor.w	r3, r3, #2
 8000412:	6153      	str	r3, [r2, #20]
}
 8000414:	bf00      	nop
 8000416:	46bd      	mov	sp, r7
 8000418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800041c:	4770      	bx	lr
 800041e:	bf00      	nop
 8000420:	40022000 	.word	0x40022000

08000424 <main>:
#include "main.h"

int main(void) {
 8000424:	b580      	push	{r7, lr}
 8000426:	b082      	sub	sp, #8
 8000428:	af00      	add	r7, sp, #0
	rcc_setup(); //clock for peripheral, clock will be set to 216MHz
 800042a:	f000 f81f 	bl	800046c <rcc_setup>
	gpio_setup(); //set pin modes and functions
 800042e:	f7ff ffad 	bl	800038c <gpio_setup>
	systick_setup(SYSTEM_FREQUENCY);
 8000432:	480c      	ldr	r0, [pc, #48]	; (8000464 <main+0x40>)
 8000434:	f000 f93c 	bl	80006b0 <systick_setup>
	basic_timer_setup(TIM6);
 8000438:	480b      	ldr	r0, [pc, #44]	; (8000468 <main+0x44>)
 800043a:	f7ff ff4b 	bl	80002d4 <basic_timer_setup>

	for (uint8_t x = 0; x < 10U; x++) {
 800043e:	2300      	movs	r3, #0
 8000440:	71fb      	strb	r3, [r7, #7]
 8000442:	e007      	b.n	8000454 <main+0x30>
		toggle_led1();
 8000444:	f7ff ffde 	bl	8000404 <toggle_led1>
		system_msdelay(100);
 8000448:	2064      	movs	r0, #100	; 0x64
 800044a:	f000 f971 	bl	8000730 <system_msdelay>
	for (uint8_t x = 0; x < 10U; x++) {
 800044e:	79fb      	ldrb	r3, [r7, #7]
 8000450:	3301      	adds	r3, #1
 8000452:	71fb      	strb	r3, [r7, #7]
 8000454:	79fb      	ldrb	r3, [r7, #7]
 8000456:	2b09      	cmp	r3, #9
 8000458:	d9f4      	bls.n	8000444 <main+0x20>
	}

	basic_timer_start(TIM6);
 800045a:	4803      	ldr	r0, [pc, #12]	; (8000468 <main+0x44>)
 800045c:	f7ff ff74 	bl	8000348 <basic_timer_start>
	while (1) {
 8000460:	e7fe      	b.n	8000460 <main+0x3c>
 8000462:	bf00      	nop
 8000464:	0cdfe600 	.word	0x0cdfe600
 8000468:	40001000 	.word	0x40001000

0800046c <rcc_setup>:
void rcc_gpio_porta(void);
void rcc_gpio_portb(void);
void rcc_gpio_porti(void);
void rcc_init(void);

void rcc_setup(void) {
 800046c:	b580      	push	{r7, lr}
 800046e:	af00      	add	r7, sp, #0
	rcc_init();
 8000470:	f000 f87e 	bl	8000570 <rcc_init>
	rcc_usart1();
 8000474:	f000 f81c 	bl	80004b0 <rcc_usart1>
	rcc_gpio_porta();
 8000478:	f000 f83a 	bl	80004f0 <rcc_gpio_porta>
	rcc_gpio_portb();
 800047c:	f000 f848 	bl	8000510 <rcc_gpio_portb>
	rcc_gpio_porti();
 8000480:	f000 f856 	bl	8000530 <rcc_gpio_porti>
	rcc_dma2();
 8000484:	f000 f864 	bl	8000550 <rcc_dma2>
	rcc_bsctmr6();
 8000488:	f000 f802 	bl	8000490 <rcc_bsctmr6>
}
 800048c:	bf00      	nop
 800048e:	bd80      	pop	{r7, pc}

08000490 <rcc_bsctmr6>:

void rcc_bsctmr6(void){
 8000490:	b480      	push	{r7}
 8000492:	af00      	add	r7, sp, #0
	RCC->APB1ENR |= RCC_APB1ENR_TIM6EN; //enable clock for basic timer 6
 8000494:	4b05      	ldr	r3, [pc, #20]	; (80004ac <rcc_bsctmr6+0x1c>)
 8000496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000498:	4a04      	ldr	r2, [pc, #16]	; (80004ac <rcc_bsctmr6+0x1c>)
 800049a:	f043 0310 	orr.w	r3, r3, #16
 800049e:	6413      	str	r3, [r2, #64]	; 0x40
}
 80004a0:	bf00      	nop
 80004a2:	46bd      	mov	sp, r7
 80004a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a8:	4770      	bx	lr
 80004aa:	bf00      	nop
 80004ac:	40023800 	.word	0x40023800

080004b0 <rcc_usart1>:

void rcc_usart1(void) {
 80004b0:	b480      	push	{r7}
 80004b2:	af00      	add	r7, sp, #0
	RCC->DCKCFGR2 &= ~RCC_DCKCFGR2_USART1SEL; //reset USART1 clock source bits
 80004b4:	4b0d      	ldr	r3, [pc, #52]	; (80004ec <rcc_usart1+0x3c>)
 80004b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80004ba:	4a0c      	ldr	r2, [pc, #48]	; (80004ec <rcc_usart1+0x3c>)
 80004bc:	f023 0303 	bic.w	r3, r3, #3
 80004c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
	RCC->DCKCFGR2 |= RCC_DCKCFGR2_USART1SEL_0; //USART1 clock is system clock
 80004c4:	4b09      	ldr	r3, [pc, #36]	; (80004ec <rcc_usart1+0x3c>)
 80004c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80004ca:	4a08      	ldr	r2, [pc, #32]	; (80004ec <rcc_usart1+0x3c>)
 80004cc:	f043 0301 	orr.w	r3, r3, #1
 80004d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
	RCC->APB2ENR |= RCC_APB2ENR_USART1EN; //enable clock for USART1 peripheral
 80004d4:	4b05      	ldr	r3, [pc, #20]	; (80004ec <rcc_usart1+0x3c>)
 80004d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80004d8:	4a04      	ldr	r2, [pc, #16]	; (80004ec <rcc_usart1+0x3c>)
 80004da:	f043 0310 	orr.w	r3, r3, #16
 80004de:	6453      	str	r3, [r2, #68]	; 0x44
}
 80004e0:	bf00      	nop
 80004e2:	46bd      	mov	sp, r7
 80004e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop
 80004ec:	40023800 	.word	0x40023800

080004f0 <rcc_gpio_porta>:

void rcc_gpio_porta(void) {
 80004f0:	b480      	push	{r7}
 80004f2:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN; //enable clock for GPIO port A
 80004f4:	4b05      	ldr	r3, [pc, #20]	; (800050c <rcc_gpio_porta+0x1c>)
 80004f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004f8:	4a04      	ldr	r2, [pc, #16]	; (800050c <rcc_gpio_porta+0x1c>)
 80004fa:	f043 0301 	orr.w	r3, r3, #1
 80004fe:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000500:	bf00      	nop
 8000502:	46bd      	mov	sp, r7
 8000504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop
 800050c:	40023800 	.word	0x40023800

08000510 <rcc_gpio_portb>:

void rcc_gpio_portb(void) {
 8000510:	b480      	push	{r7}
 8000512:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN; //enable clock for GPIO port B
 8000514:	4b05      	ldr	r3, [pc, #20]	; (800052c <rcc_gpio_portb+0x1c>)
 8000516:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000518:	4a04      	ldr	r2, [pc, #16]	; (800052c <rcc_gpio_portb+0x1c>)
 800051a:	f043 0302 	orr.w	r3, r3, #2
 800051e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000520:	bf00      	nop
 8000522:	46bd      	mov	sp, r7
 8000524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000528:	4770      	bx	lr
 800052a:	bf00      	nop
 800052c:	40023800 	.word	0x40023800

08000530 <rcc_gpio_porti>:

void rcc_gpio_porti(void) {
 8000530:	b480      	push	{r7}
 8000532:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOIEN; //enable clock for GPIO port I
 8000534:	4b05      	ldr	r3, [pc, #20]	; (800054c <rcc_gpio_porti+0x1c>)
 8000536:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000538:	4a04      	ldr	r2, [pc, #16]	; (800054c <rcc_gpio_porti+0x1c>)
 800053a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800053e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000540:	bf00      	nop
 8000542:	46bd      	mov	sp, r7
 8000544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000548:	4770      	bx	lr
 800054a:	bf00      	nop
 800054c:	40023800 	.word	0x40023800

08000550 <rcc_dma2>:
void rcc_dma1(void) {
	RCC->AHB1ENR |= RCC_AHB1ENR_DMA1EN; //enable clock for DMA1
}
void rcc_dma2(void) {
 8000550:	b480      	push	{r7}
 8000552:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |= RCC_AHB1ENR_DMA2EN; //enable clock for DMA2
 8000554:	4b05      	ldr	r3, [pc, #20]	; (800056c <rcc_dma2+0x1c>)
 8000556:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000558:	4a04      	ldr	r2, [pc, #16]	; (800056c <rcc_dma2+0x1c>)
 800055a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800055e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000560:	bf00      	nop
 8000562:	46bd      	mov	sp, r7
 8000564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop
 800056c:	40023800 	.word	0x40023800

08000570 <rcc_init>:
void rcc_init(void) {
 8000570:	b480      	push	{r7}
 8000572:	b083      	sub	sp, #12
 8000574:	af00      	add	r7, sp, #0

	//enable HSE
	RCC->CR |= RCC_CR_HSEON;
 8000576:	4b4a      	ldr	r3, [pc, #296]	; (80006a0 <rcc_init+0x130>)
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	4a49      	ldr	r2, [pc, #292]	; (80006a0 <rcc_init+0x130>)
 800057c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000580:	6013      	str	r3, [r2, #0]
	while (!(RCC->CR & RCC_CR_HSERDY)); //wait while hardware signals HSE is stable
 8000582:	bf00      	nop
 8000584:	4b46      	ldr	r3, [pc, #280]	; (80006a0 <rcc_init+0x130>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800058c:	2b00      	cmp	r3, #0
 800058e:	d0f9      	beq.n	8000584 <rcc_init+0x14>

	//enable PWR peripheral
	volatile uint32_t temp;
	RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8000590:	4b43      	ldr	r3, [pc, #268]	; (80006a0 <rcc_init+0x130>)
 8000592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000594:	4a42      	ldr	r2, [pc, #264]	; (80006a0 <rcc_init+0x130>)
 8000596:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800059a:	6413      	str	r3, [r2, #64]	; 0x40
	temp = RCC->APB1ENR & RCC_APB1ENR_PWREN;
 800059c:	4b40      	ldr	r3, [pc, #256]	; (80006a0 <rcc_init+0x130>)
 800059e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005a4:	607b      	str	r3, [r7, #4]
	(void) temp; //waste cycles until activated
 80005a6:	687b      	ldr	r3, [r7, #4]

	PWR->CR1 |= PWR_CR1_VOS; //explicit default value for internal voltage regulator
 80005a8:	4b3e      	ldr	r3, [pc, #248]	; (80006a4 <rcc_init+0x134>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	4a3d      	ldr	r2, [pc, #244]	; (80006a4 <rcc_init+0x134>)
 80005ae:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80005b2:	6013      	str	r3, [r2, #0]
	(void) temp; //waste cycles until activated
 80005b4:	687b      	ldr	r3, [r7, #4]
	PWR->CR1 |= PWR_CR1_ODEN;
 80005b6:	4b3b      	ldr	r3, [pc, #236]	; (80006a4 <rcc_init+0x134>)
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	4a3a      	ldr	r2, [pc, #232]	; (80006a4 <rcc_init+0x134>)
 80005bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80005c0:	6013      	str	r3, [r2, #0]
	while (!(PWR->CSR1 & PWR_CSR1_ODRDY)); //wait while overdrive gets ready
 80005c2:	bf00      	nop
 80005c4:	4b37      	ldr	r3, [pc, #220]	; (80006a4 <rcc_init+0x134>)
 80005c6:	685b      	ldr	r3, [r3, #4]
 80005c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d0f9      	beq.n	80005c4 <rcc_init+0x54>
	PWR->CR1 |= PWR_CR1_ODSWEN; //enable overdrive switching
 80005d0:	4b34      	ldr	r3, [pc, #208]	; (80006a4 <rcc_init+0x134>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	4a33      	ldr	r2, [pc, #204]	; (80006a4 <rcc_init+0x134>)
 80005d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005da:	6013      	str	r3, [r2, #0]
	while (!(PWR->CSR1 & PWR_CSR1_ODSWRDY)); //wait while overdrive gets ready
 80005dc:	bf00      	nop
 80005de:	4b31      	ldr	r3, [pc, #196]	; (80006a4 <rcc_init+0x134>)
 80005e0:	685b      	ldr	r3, [r3, #4]
 80005e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d0f9      	beq.n	80005de <rcc_init+0x6e>

	//configure PLL

	RCC->PLLCFGR |= RCC_PLLCFGR_PLLSRC_HSE; //PLL/PLL2S source = HSE
 80005ea:	4b2d      	ldr	r3, [pc, #180]	; (80006a0 <rcc_init+0x130>)
 80005ec:	685b      	ldr	r3, [r3, #4]
 80005ee:	4a2c      	ldr	r2, [pc, #176]	; (80006a0 <rcc_init+0x130>)
 80005f0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80005f4:	6053      	str	r3, [r2, #4]
	RCC->PLLCFGR &= ~(0x1F << RCC_PLLCFGR_PLLM_Pos); //reset all PLLM bits
 80005f6:	4b2a      	ldr	r3, [pc, #168]	; (80006a0 <rcc_init+0x130>)
 80005f8:	685b      	ldr	r3, [r3, #4]
 80005fa:	4a29      	ldr	r2, [pc, #164]	; (80006a0 <rcc_init+0x130>)
 80005fc:	f023 031f 	bic.w	r3, r3, #31
 8000600:	6053      	str	r3, [r2, #4]
	RCC->PLLCFGR |= (0x19 << RCC_PLLCFGR_PLLM_Pos); //PLLM 25
 8000602:	4b27      	ldr	r3, [pc, #156]	; (80006a0 <rcc_init+0x130>)
 8000604:	685b      	ldr	r3, [r3, #4]
 8000606:	4a26      	ldr	r2, [pc, #152]	; (80006a0 <rcc_init+0x130>)
 8000608:	f043 0319 	orr.w	r3, r3, #25
 800060c:	6053      	str	r3, [r2, #4]
	RCC->PLLCFGR &= ~(0x1FF << RCC_PLLCFGR_PLLN_Pos); //reset all PLLN bits
 800060e:	4b24      	ldr	r3, [pc, #144]	; (80006a0 <rcc_init+0x130>)
 8000610:	685a      	ldr	r2, [r3, #4]
 8000612:	4923      	ldr	r1, [pc, #140]	; (80006a0 <rcc_init+0x130>)
 8000614:	4b24      	ldr	r3, [pc, #144]	; (80006a8 <rcc_init+0x138>)
 8000616:	4013      	ands	r3, r2
 8000618:	604b      	str	r3, [r1, #4]
	RCC->PLLCFGR |= (0x1B0 << RCC_PLLCFGR_PLLN_Pos); //PLLN 432
 800061a:	4b21      	ldr	r3, [pc, #132]	; (80006a0 <rcc_init+0x130>)
 800061c:	685b      	ldr	r3, [r3, #4]
 800061e:	4a20      	ldr	r2, [pc, #128]	; (80006a0 <rcc_init+0x130>)
 8000620:	f443 43d8 	orr.w	r3, r3, #27648	; 0x6c00
 8000624:	6053      	str	r3, [r2, #4]
	RCC->PLLCFGR &= ~RCC_PLLCFGR_PLLP; //PLLP 2
 8000626:	4b1e      	ldr	r3, [pc, #120]	; (80006a0 <rcc_init+0x130>)
 8000628:	685b      	ldr	r3, [r3, #4]
 800062a:	4a1d      	ldr	r2, [pc, #116]	; (80006a0 <rcc_init+0x130>)
 800062c:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8000630:	6053      	str	r3, [r2, #4]

	//RCC->PLLCFGR = 0x29406C19;

	RCC->CR |= RCC_CR_PLLON; //Enable PLL
 8000632:	4b1b      	ldr	r3, [pc, #108]	; (80006a0 <rcc_init+0x130>)
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	4a1a      	ldr	r2, [pc, #104]	; (80006a0 <rcc_init+0x130>)
 8000638:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800063c:	6013      	str	r3, [r2, #0]
	while (!(RCC->CR & RCC_CR_PLLRDY)); //wait while hardware signals PLL is OK
 800063e:	bf00      	nop
 8000640:	4b17      	ldr	r3, [pc, #92]	; (80006a0 <rcc_init+0x130>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000648:	2b00      	cmp	r3, #0
 800064a:	d0f9      	beq.n	8000640 <rcc_init+0xd0>

	FLASH->ACR |= 7U; //Set Flash wait states higher before pumping the clock up (8 clock cycles)
 800064c:	4b17      	ldr	r3, [pc, #92]	; (80006ac <rcc_init+0x13c>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	4a16      	ldr	r2, [pc, #88]	; (80006ac <rcc_init+0x13c>)
 8000652:	f043 0307 	orr.w	r3, r3, #7
 8000656:	6013      	str	r3, [r2, #0]

	//configure AHB/APB clocks
	RCC->CFGR &= ~RCC_CFGR_HPRE_DIV1; //AHB Prescaler 1
 8000658:	4b11      	ldr	r3, [pc, #68]	; (80006a0 <rcc_init+0x130>)
 800065a:	4a11      	ldr	r2, [pc, #68]	; (80006a0 <rcc_init+0x130>)
 800065c:	689b      	ldr	r3, [r3, #8]
 800065e:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= RCC_CFGR_PPRE1_DIV4; //APB1 Prescaler 4
 8000660:	4b0f      	ldr	r3, [pc, #60]	; (80006a0 <rcc_init+0x130>)
 8000662:	689b      	ldr	r3, [r3, #8]
 8000664:	4a0e      	ldr	r2, [pc, #56]	; (80006a0 <rcc_init+0x130>)
 8000666:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 800066a:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= RCC_CFGR_PPRE2_DIV2; //APB2 Prescaler 2
 800066c:	4b0c      	ldr	r3, [pc, #48]	; (80006a0 <rcc_init+0x130>)
 800066e:	689b      	ldr	r3, [r3, #8]
 8000670:	4a0b      	ldr	r2, [pc, #44]	; (80006a0 <rcc_init+0x130>)
 8000672:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000676:	6093      	str	r3, [r2, #8]

	//Set System Clock to PLL
	RCC->CFGR |= RCC_CFGR_SW_PLL; // System Clock Mux: Select PLL as system clock
 8000678:	4b09      	ldr	r3, [pc, #36]	; (80006a0 <rcc_init+0x130>)
 800067a:	689b      	ldr	r3, [r3, #8]
 800067c:	4a08      	ldr	r2, [pc, #32]	; (80006a0 <rcc_init+0x130>)
 800067e:	f043 0302 	orr.w	r3, r3, #2
 8000682:	6093      	str	r3, [r2, #8]
	while ((RCC->CFGR & RCC_CFGR_SWS) != (RCC_CFGR_SWS_PLL)); //wait until PLL is established as system clock
 8000684:	bf00      	nop
 8000686:	4b06      	ldr	r3, [pc, #24]	; (80006a0 <rcc_init+0x130>)
 8000688:	689b      	ldr	r3, [r3, #8]
 800068a:	f003 030c 	and.w	r3, r3, #12
 800068e:	2b08      	cmp	r3, #8
 8000690:	d1f9      	bne.n	8000686 <rcc_init+0x116>
}
 8000692:	bf00      	nop
 8000694:	bf00      	nop
 8000696:	370c      	adds	r7, #12
 8000698:	46bd      	mov	sp, r7
 800069a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069e:	4770      	bx	lr
 80006a0:	40023800 	.word	0x40023800
 80006a4:	40007000 	.word	0x40007000
 80006a8:	ffff803f 	.word	0xffff803f
 80006ac:	40023c00 	.word	0x40023c00

080006b0 <systick_setup>:
#include "systick.h"

volatile uint32_t SYSTEM_MS; //46 days

void systick_setup(uint32_t sys_freq) {
 80006b0:	b480      	push	{r7}
 80006b2:	b083      	sub	sp, #12
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
	SysTick->LOAD = (SYSTEM_FREQUENCY / 1000U) - 1U; //1ms tick
 80006b8:	4b0d      	ldr	r3, [pc, #52]	; (80006f0 <systick_setup+0x40>)
 80006ba:	4a0e      	ldr	r2, [pc, #56]	; (80006f4 <systick_setup+0x44>)
 80006bc:	605a      	str	r2, [r3, #4]
	SysTick->VAL = 0x00; //explicitly set start value (undefined on reset)
 80006be:	4b0c      	ldr	r3, [pc, #48]	; (80006f0 <systick_setup+0x40>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	609a      	str	r2, [r3, #8]
	SysTick->CTRL |= (1U << SysTick_CTRL_TICKINT_Pos) | (1U << SysTick_CTRL_CLKSOURCE_Pos); //enable systick interrupt, source processor clock
 80006c4:	4b0a      	ldr	r3, [pc, #40]	; (80006f0 <systick_setup+0x40>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	4a09      	ldr	r2, [pc, #36]	; (80006f0 <systick_setup+0x40>)
 80006ca:	f043 0306 	orr.w	r3, r3, #6
 80006ce:	6013      	str	r3, [r2, #0]
	SCB->SHPR[8] = 0U; //set SysTick interrupt priority (default: 0, the highest)
 80006d0:	4b09      	ldr	r3, [pc, #36]	; (80006f8 <systick_setup+0x48>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	f883 2020 	strb.w	r2, [r3, #32]
	SysTick->CTRL |= (1U << SysTick_CTRL_ENABLE_Pos); //enable SysTick
 80006d8:	4b05      	ldr	r3, [pc, #20]	; (80006f0 <systick_setup+0x40>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	4a04      	ldr	r2, [pc, #16]	; (80006f0 <systick_setup+0x40>)
 80006de:	f043 0301 	orr.w	r3, r3, #1
 80006e2:	6013      	str	r3, [r2, #0]
}
 80006e4:	bf00      	nop
 80006e6:	370c      	adds	r7, #12
 80006e8:	46bd      	mov	sp, r7
 80006ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ee:	4770      	bx	lr
 80006f0:	e000e010 	.word	0xe000e010
 80006f4:	00034bbf 	.word	0x00034bbf
 80006f8:	e000ed00 	.word	0xe000ed00

080006fc <SysTick_Handler>:

void SysTick_Handler(void) {
 80006fc:	b480      	push	{r7}
 80006fe:	af00      	add	r7, sp, #0
	SYSTEM_MS++;
 8000700:	4b04      	ldr	r3, [pc, #16]	; (8000714 <SysTick_Handler+0x18>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	3301      	adds	r3, #1
 8000706:	4a03      	ldr	r2, [pc, #12]	; (8000714 <SysTick_Handler+0x18>)
 8000708:	6013      	str	r3, [r2, #0]
}
 800070a:	bf00      	nop
 800070c:	46bd      	mov	sp, r7
 800070e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000712:	4770      	bx	lr
 8000714:	2000001c 	.word	0x2000001c

08000718 <millis>:

uint32_t millis(void){
 8000718:	b480      	push	{r7}
 800071a:	af00      	add	r7, sp, #0
	return SYSTEM_MS;
 800071c:	4b03      	ldr	r3, [pc, #12]	; (800072c <millis+0x14>)
 800071e:	681b      	ldr	r3, [r3, #0]
}
 8000720:	4618      	mov	r0, r3
 8000722:	46bd      	mov	sp, r7
 8000724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000728:	4770      	bx	lr
 800072a:	bf00      	nop
 800072c:	2000001c 	.word	0x2000001c

08000730 <system_msdelay>:

void system_msdelay(uint32_t delay_ms){
 8000730:	b580      	push	{r7, lr}
 8000732:	b084      	sub	sp, #16
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
	uint32_t end = millis() + delay_ms;
 8000738:	f7ff ffee 	bl	8000718 <millis>
 800073c:	4602      	mov	r2, r0
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	4413      	add	r3, r2
 8000742:	60fb      	str	r3, [r7, #12]
	while(millis()!=end); //not <, because overflow
 8000744:	bf00      	nop
 8000746:	f7ff ffe7 	bl	8000718 <millis>
 800074a:	4602      	mov	r2, r0
 800074c:	68fb      	ldr	r3, [r7, #12]
 800074e:	4293      	cmp	r3, r2
 8000750:	d1f9      	bne.n	8000746 <system_msdelay+0x16>
}
 8000752:	bf00      	nop
 8000754:	bf00      	nop
 8000756:	3710      	adds	r7, #16
 8000758:	46bd      	mov	sp, r7
 800075a:	bd80      	pop	{r7, pc}

0800075c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800075c:	480d      	ldr	r0, [pc, #52]	; (8000794 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800075e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000760:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000764:	480c      	ldr	r0, [pc, #48]	; (8000798 <LoopForever+0x6>)
  ldr r1, =_edata
 8000766:	490d      	ldr	r1, [pc, #52]	; (800079c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000768:	4a0d      	ldr	r2, [pc, #52]	; (80007a0 <LoopForever+0xe>)
  movs r3, #0
 800076a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800076c:	e002      	b.n	8000774 <LoopCopyDataInit>

0800076e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800076e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000770:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000772:	3304      	adds	r3, #4

08000774 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000774:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000776:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000778:	d3f9      	bcc.n	800076e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800077a:	4a0a      	ldr	r2, [pc, #40]	; (80007a4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800077c:	4c0a      	ldr	r4, [pc, #40]	; (80007a8 <LoopForever+0x16>)
  movs r3, #0
 800077e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000780:	e001      	b.n	8000786 <LoopFillZerobss>

08000782 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000782:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000784:	3204      	adds	r2, #4

08000786 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000786:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000788:	d3fb      	bcc.n	8000782 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800078a:	f000 f811 	bl	80007b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800078e:	f7ff fe49 	bl	8000424 <main>

08000792 <LoopForever>:

LoopForever:
    b LoopForever
 8000792:	e7fe      	b.n	8000792 <LoopForever>
  ldr   r0, =_estack
 8000794:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000798:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800079c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80007a0:	08000818 	.word	0x08000818
  ldr r2, =_sbss
 80007a4:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80007a8:	20000020 	.word	0x20000020

080007ac <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007ac:	e7fe      	b.n	80007ac <ADC_IRQHandler>
	...

080007b0 <__libc_init_array>:
 80007b0:	b570      	push	{r4, r5, r6, lr}
 80007b2:	4d0d      	ldr	r5, [pc, #52]	; (80007e8 <__libc_init_array+0x38>)
 80007b4:	4c0d      	ldr	r4, [pc, #52]	; (80007ec <__libc_init_array+0x3c>)
 80007b6:	1b64      	subs	r4, r4, r5
 80007b8:	10a4      	asrs	r4, r4, #2
 80007ba:	2600      	movs	r6, #0
 80007bc:	42a6      	cmp	r6, r4
 80007be:	d109      	bne.n	80007d4 <__libc_init_array+0x24>
 80007c0:	4d0b      	ldr	r5, [pc, #44]	; (80007f0 <__libc_init_array+0x40>)
 80007c2:	4c0c      	ldr	r4, [pc, #48]	; (80007f4 <__libc_init_array+0x44>)
 80007c4:	f000 f818 	bl	80007f8 <_init>
 80007c8:	1b64      	subs	r4, r4, r5
 80007ca:	10a4      	asrs	r4, r4, #2
 80007cc:	2600      	movs	r6, #0
 80007ce:	42a6      	cmp	r6, r4
 80007d0:	d105      	bne.n	80007de <__libc_init_array+0x2e>
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80007d8:	4798      	blx	r3
 80007da:	3601      	adds	r6, #1
 80007dc:	e7ee      	b.n	80007bc <__libc_init_array+0xc>
 80007de:	f855 3b04 	ldr.w	r3, [r5], #4
 80007e2:	4798      	blx	r3
 80007e4:	3601      	adds	r6, #1
 80007e6:	e7f2      	b.n	80007ce <__libc_init_array+0x1e>
 80007e8:	08000810 	.word	0x08000810
 80007ec:	08000810 	.word	0x08000810
 80007f0:	08000810 	.word	0x08000810
 80007f4:	08000814 	.word	0x08000814

080007f8 <_init>:
 80007f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007fa:	bf00      	nop
 80007fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80007fe:	bc08      	pop	{r3}
 8000800:	469e      	mov	lr, r3
 8000802:	4770      	bx	lr

08000804 <_fini>:
 8000804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000806:	bf00      	nop
 8000808:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800080a:	bc08      	pop	{r3}
 800080c:	469e      	mov	lr, r3
 800080e:	4770      	bx	lr
